#!/usr/bin/env python3
import os
import subprocess
import sys
from pathlib import Path
from time import sleep

import typer


class LinuxKeycodeTranslator:
    def __init__(self) -> None:
        self.linux_keycode_map = {
            ";": "KEY_SEMICOLON",
            ":": "KEY_LEFTSHIFT KEY_SEMICOLON",
            ".": "KEY_DOT",
            ",": "KEY_COMMA",
            "<": "KEY_LEFTSHIFT KEY_COMMA",
            ">": "KEY_LEFTSHIFT KEY_DOT",
            "'": "KEY_APOSTROPHE",
            "`": "KEY_GRAVE",
            "/": "KEY_SLASH",
            "?": "KEY_LEFTSHIFT KEY_SLASH",
            "!": "KEY_LEFTSHIFT KEY_1",
            "@": "KEY_LEFTSHIFT KEY_2",
            "#": "KEY_LEFTSHIFT KEY_3",
            "$": "KEY_LEFTSHIFT KEY_4",
            "%": "KEY_LEFTSHIFT KEY_5",
            "^": "KEY_LEFTSHIFT KEY_6",
            "&": "KEY_LEFTSHIFT KEY_7",
            "*": "KEY_LEFTSHIFT KEY_8",
            "(": "KEY_LEFTSHIFT KEY_9",
            ")": "KEY_LEFTSHIFT KEY_0",
            "[": "KEY_LEFTBRACE",
            "{": "KEY_LEFTSHIFT KEY_LEFTBRACE",
            "]": "KEY_RIGHTBRACE",
            "}": "KEY_LEFTSHIFT KEY_RIGHTBRACE",
        }

    def translate(self, character: str) -> str:
        if character in self.linux_keycode_map:
            return self.linux_keycode_map[character]
        if character.isupper():
            return f"KEY_LEFTSHIFT KEY_{character}"
        return f"KEY_{character.upper()}"


class UnlockVm:
    def __init__(
        self,
        password: str,
        virsh_domain: str,
        unlock: bool,
    ) -> None:
        self._password = password
        self._virsh_domain = virsh_domain
        self._unlock = unlock
        self._translator = LinuxKeycodeTranslator()

    def unlock(self) -> None:
        if not self._is_root():
            typer.echo("This program requires root priv.")
            sys.exit(1)

        if self._unlock:
            self._send_enter()
            sleep(1)

        for character in self._password:
            keycode = self._translator.translate(character=character)
            self._send_key(keycode=keycode)

        if self._unlock:
            sleep(1)
            self._send_enter()

    def _send_enter(self):
        self._send_key(keycode="KEY_ENTER")

    def _is_root(self) -> bool:
        return os.geteuid() == 0

    def _send_key(self, keycode: str):
        command = f"virsh send-key {self._virsh_domain} {keycode}"
        subprocess.run(command.split(" "), stdout=subprocess.DEVNULL)


def main(
    password_file: Path,
    virsh_domain: str = "win10",
    unlock: bool = typer.Option(False, "--unlock"),
):
    with open(password_file, "r") as pw_file:
        password = pw_file.read().rstrip("\n")
    unlock_vm = UnlockVm(password=password, virsh_domain=virsh_domain, unlock=unlock)
    unlock_vm.unlock()


if __name__ == "__main__":
    typer.run(main)
